#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const { Server } = require("socket.io")
var db = require('../db');
//var db= require('better-sqlite3')('../var/db/giftshop.db');

var debug = require('debug')('todos:server');
var http = require('http');
var _ = require('lodash');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, { /* options */ });
let users = {};
/*
io.on('connection', function(socket){
  console.log('a user connected');

  io.sockets.emit('users', users);

  users[userId].push(socket.id);

  socket.on('login', function(data){
    friends = db2.prepare('SELECT friend from friends where name = ?').all(data)
    freinds2=db2.prepare('SELECT name from friends where friend = ?').all(data)
    if (friends.length > 0) {
      friends.forEach(function(friend) {
        io.sockets[friend].emit('online', data);
      });
    }
    if (freinds2.length > 0) {
      freinds2.forEach(function(friend) {
        io.sockets[friend].emit('online', data);
      });
    }
    console.log('a user ' + data.userId + ' connected');

    // saving userId to object with socket ID
    users[socket.id] = data;
  });

  socket.on('disconnect', function(data){
    _.remove(users[socket.id], (u) => u === socket.id);
    if (users[userId].length === 0) {
      // ISER IS OFFLINE BROAD CAST TO ALL CONNECTED USERS
      io.sockets.emit("offline", data);
    // remove saved socket from users object
    delete users[socket.id];
    console.log('user disconnected');
    socket.disconnect();
    }
});
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
var ftpcli = require('ftp-client');
const { finished } = require('stream');

ftpcli = new ftpcli({
    host: '20.115.84.85',
    port: 21,
    user: 'threeam',
    password: '3amDockerImage'
});
/*
ftpcli.connect(function() {
    ftpcli.download('/ftp/files', './var/db', function(result) {
        console.log(result);
    });
});
*/
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
